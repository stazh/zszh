<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:nontei="http://ssrq-sds-fds.ch/ns/nonTEI" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>TEI Processing Model for RQZH</title>
            </titleStmt>
            <publicationStmt>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="zszh.css"/>
            </tagsDecl>
        </encodingDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="rqzh-norm" source="zszh.odd">
                <elementSpec ident="lb" mode="change">
                    <model behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="seg" mode="change">
                    <model predicate="@n and not(p)" behaviour="block">
                        <param name="content" value="(text{'['}, @n, text{'] '}, .)"/>
                        <outputRendition>
                            margin-top: 1ex;
                        </outputRendition>
                    </model>
                    <model predicate=". is (ancestor::quote[1]/seg[1])" behaviour="inline">
                        <desc>Force « on same line, cf. quote</desc>
                    </model>
                    <model predicate=". is (ancestor::quote[1]/seg[last()])" behaviour="inline">
                        <desc>Force » on same line, cf. quote</desc>
                    </model>
                    <model predicate=". is (ancestor::quote[1]/seg[last()-1])" behaviour="block">
                        <desc>Add missing margin</desc>
                        <outputRendition>
                            
                            margin-top: 1ex;
                            margin-bottom: 1ex;
                        
                        </outputRendition>
                    </model>
                    <model behaviour="block">
                        <outputRendition>
                            margin-top: 1ex;
                        </outputRendition>
                    </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model output="plain" predicate="sic and corr" behaviour="inline">
                        <param name="content" value="corr[1]"/>
                    </model>
                    <model output="plain" predicate="abbr and expan" behaviour="inline">
                        <param name="content" value="expan[1]"/>
                    </model>
                    <model output="plain" predicate="orig and reg" behaviour="inline">
                        <param name="content" value="reg[1]"/>
                    </model>
                    <model predicate="sic/del and corr" behaviour="alternote" cssClass="text-critical">
                        <param name="content" value="corr"/>
                        <param name="alternate" value="(ec:label('corrected-from'), ec:colon(), normalize-space(string-join(sic//text())), ', ', ec:translate(sic/del/@rend, 0, 'uppercase'), ec:colon(), sic/del//text())"/>
                        <param name="type" value="'text-critical'"/>
                    </model>
                    <model predicate="sic and corr" behaviour="alternote" cssClass="text-critical">
                        <param name="content" value="corr"/>
                        <param name="alternate" value="(ec:label('corrected-from'), ec:colon(), sic)"/>
                        <param name="type" value="'text-critical'"/>
                    </model>
                    <model predicate="abbr and expan" behaviour="alternate" cssClass="text-critical">
                        <param name="default" value="expan[1]"/>
                        <param name="alternate" value="(ec:label('abbr-nonexpanded'), ec:colon(), abbr[1])"/>
                    </model>
                    <model predicate="orig and reg" behaviour="alternate" cssClass="text-critical">
                        <param name="default" value="reg[1]"/>
                        <param name="alternate" value="orig[1]"/>
                    </model>
                </elementSpec>
                <elementSpec ident="expan" mode="change">
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model predicate="parent::seg[@n] and parent::seg/*[1] is ." behaviour="paragraph" useSourceRendition="true">
                        <desc>Put seg numbering before the first p but on the same line</desc>
                        <param name="content" value="('[', parent::seg/@n, '] ', .)"/>
                        <outputRendition>
                            margin-top: 1ex;
                        </outputRendition>
                    </model>
                    <model predicate="parent::body/div and parent::div[@n]/*[1] is ." behaviour="paragraph" useSourceRendition="true">
                        <param name="content" value="('[', parent::div/@n, '] ', .)"/>
                        <outputRendition>
                            text-align: justify;
                        </outputRendition>
                    </model>
                    <model behaviour="paragraph" useSourceRendition="true">
                        <outputRendition>
                            text-align: justify;
                        </outputRendition>
                    </model>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="@resp and @n" behaviour="heading">
                        <desc>Supplied heading: output in brackets if @resp</desc>
                        <param name="level" value="if (@type='title') then 1 else 2"/>
                        <param name="content" value="('[ ', @n, ' ', ., ' ]')"/>
                        <outputRendition>
                            font-weight: bold;
                        </outputRendition>
                    </model>
                    <model predicate="@n" behaviour="heading">
                        <desc>Supplied heading: n. in brackets unless @resp</desc>
                        <param name="level" value="if (@type='title') then 1 else 2"/>
                        <param name="content" value="('[ ', @n, ' ] ', .)"/>
                        <outputRendition>
                            font-weight: bold;
                        </outputRendition>
                    </model>
                    <model predicate="@resp" behaviour="heading">
                        <desc>Supplied heading: output in brackets if @resp</desc>
                        <param name="level" value="if (@type='title') then 1 else 2"/>
                        <param name="content" value="."/>
                        <outputRendition>
                            font-weight: bold;
                        </outputRendition>
                        <outputRendition scope="before">
                            content: '[ ';
                        </outputRendition>
                        <outputRendition scope="after">
                            content: ' ]';
                        </outputRendition>
                    </model>
                    <model predicate="$parameters?header='short'" behaviour="inline">
                        <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
                    </model>
                    <model predicate="parent::figure" behaviour="block">
                        <outputRendition>
                            font-style: italic;
                        </outputRendition>
                    </model>
                    <model predicate="parent::table" behaviour="caption">
                        <desc>head inside table should be output as caption element</desc>
                    </model>
                    <model predicate="parent::lg" behaviour="block">
                        <outputRendition>
                            font-style: italic;
                        </outputRendition>
                    </model>
                    <model predicate="parent::list" behaviour="block">
                        <outputRendition>
                            font-weight: bold;
                        </outputRendition>
                    </model>
                    <model predicate="ancestor::app" behaviour="inline" cssClass="head">
                        <desc>Heading in app</desc>
                        <outputRendition>
                            display: block;
                            font-weight: 700;
                            line-height: 1.2;
                            margin-top: 20px;
                            margin-bottom: 10px;
                        </outputRendition>
                    </model>
                    <model predicate="parent::div[@n][@type=('chapter', 'section')]/*[1] is ." behaviour="heading">
                        <desc>Show number in front of heading if @n is set on parent</desc>
                        <param name="content" value="('[', parent::div/@n, '] ', .)"/>
                        <param name="level" value="1"/>
                    </model>
                    <model predicate="parent::div[@n]/*[1] is ." behaviour="heading">
                        <desc>Show number in front of heading if @n is set on parent</desc>
                        <param name="content" value="('[', parent::div/@n, '] ', .)"/>
                        <param name="level" value="if (@type=('chapter','section','title')) then 1 else 2"/>
                    </model>
                    <model behaviour="heading">
                        <desc>All other headings are same size as text</desc>
                        <param name="level" value="if (@type='title') then 1 else 2"/>
                    </model>
                </elementSpec>
                <elementSpec ident="quote" mode="change">
                    <model behaviour="inline">
                        <desc>With quotes</desc>
                        <outputRendition scope="before">
                            content: '«';
                        </outputRendition>
                        <outputRendition scope="after">
                            content: '»';
                        </outputRendition>
                    </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>